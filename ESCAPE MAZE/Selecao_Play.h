/*
 * Selecao_Play.h
 *
 *  Created on: 8 de jun de 2019
 *      Author: Danilo
 */

#ifndef SELECAO_PLAY_H_
#define SELECAO_PLAY_H_

#include "conf_botton.h" //defines dos botoes
#include "maze_library.h" //contem os labirintos
#include <stdlib.h>

const unsigned char Sucess01[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x20, 0x20, 0x20, 0x1f, 0x00, 0x19, 0x24, 0x24, 0x24, 0x3f, 0x00, 0x1f, 0x20, 0x20, 0x11, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x9f, 0x20, 0x20, 0x11, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x60, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x01, 0x41, 0x41, 0x40, 0xc0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x02, 0x0c, 0x1f, 0x00, 0x0f, 0x12, 0x12, 0x12, 0x0b, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x1f, 0x00, 0x0c, 0x12, 0x12, 0x12, 0x1f, 0x00, 0x18, 0x16, 0x11, 0x10, 0x00, 0x0f, 0x12, 0x12, 0x12, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xfa, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x82, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Sucess02[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x20, 0x20, 0x20, 0x1f, 0x00, 0x19, 0x24, 0x24, 0x24, 0x3f, 0x00, 0x1f, 0x20, 0x20, 0x11, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x9f, 0x20, 0x20, 0x11, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x60, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x01, 0x41, 0x41, 0x40, 0xc0, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x02, 0x0c, 0x1f, 0x00, 0x0f, 0x12, 0x12, 0x12, 0x0b, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x0f, 0x10, 0x0f, 0x00, 0x1f, 0x00, 0x0c, 0x12, 0x12, 0x12, 0x1f, 0x00, 0x18, 0x16, 0x11, 0x10, 0x00, 0x0f, 0x12, 0x12, 0x12, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x9e, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xfd, 0xf9, 0xf1, 0xe1, 0xc1, 0x81, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Exit01[] = {
    0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x01, 0x1e, 0x20, 0x1e, 0x01, 0x3f, 0x00, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x3f, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x40, 0x80, 0x00, 0x80, 0x40, 0x20, 0x00, 0xe0, 0x00, 0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x00, 0xc0, 0x60, 0x20, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x20, 0x10, 0x0d, 0x02, 0x0d, 0x10, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xf8, 0xfc, 0xfe, 0xf6, 0xce, 0xbe, 0x7e, 0xbe, 0xce, 0xf6, 0xfe, 0x06, 0x76, 0x76, 0x76, 0x76, 0xfe, 0xfe, 0x8e, 0x76, 0x76, 0x76, 0xce, 0xfe, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x30, 0xc0, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x08, 0x10, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x30, 0x3f, 0x3f, 0x3f, 0x3f, 0x30, 0x37, 0x37, 0x37, 0x37, 0x3f, 0x3f, 0x39, 0x37, 0x37, 0x37, 0x38, 0x3f, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0x06, 0x0f, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Exit02[] = {
    0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x01, 0x1e, 0x20, 0x1e, 0x01, 0x3f, 0x00, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x3f, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x40, 0x80, 0x00, 0x80, 0x40, 0x20, 0x00, 0xe0, 0x00, 0x00, 0x20, 0x20, 0xe0, 0x20, 0x20, 0x00, 0xc0, 0x60, 0x20, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x22, 0x22, 0x22, 0x22, 0x00, 0x20, 0x10, 0x0d, 0x02, 0x0d, 0x10, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x40, 0x80, 0x40, 0x30, 0x08, 0x00, 0xf8, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x06, 0xce, 0x3e, 0xfe, 0xfe, 0x06, 0xfe, 0xfe, 0x1e, 0xee, 0xf6, 0xf6, 0xee, 0x1e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x06, 0x08, 0x08, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x30, 0x3f, 0x3f, 0x3e, 0x39, 0x30, 0x3f, 0x3f, 0x3c, 0x3b, 0x37, 0x37, 0x3b, 0x3c, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x00
};

const unsigned char GameOver01[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x03, 0x01, 0x01, 0x00, 0x40, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0x21, 0x31, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x83, 0x07, 0x83, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xe7, 0xe0, 0xe0, 0xe0, 0xe0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xe0, 0xe0, 0xe0, 0xe0, 0xe7, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0xff, 0xcf, 0x0f, 0x0f, 0x0f, 0x0f, 0x3f, 0xff, 0x3f, 0x0f, 0x0f, 0x0f, 0x0f, 0xcf, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x8f, 0x8f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x04, 0x0e, 0x0e, 0x04, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xff, 0xfe, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x31, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char GameOver02[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xdf, 0x8f, 0x8f, 0xef, 0xef, 0xef, 0xef, 0xe7, 0x00, 0x00, 0x80, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0x8f, 0x8f, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x3e, 0x7c, 0x3e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x73, 0x73, 0x73, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0x80, 0x18, 0xf8, 0xf8, 0xf8, 0xf8, 0xe0, 0x00, 0xe0, 0xf8, 0xf8, 0xf8, 0xf8, 0x18, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x38, 0x38, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0x7f, 0xff, 0xfd, 0xf8, 0xf8, 0xfd, 0xff, 0x7f, 0x7f, 0x3f, 0x0f, 0x00, 0x00, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0xe7, 0xe7, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xf9, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int cont1 = 0;
int conta = 0;
int cronometro = 0;
int status_cronometro = 0;
void Timer1IntHandler(void)
{
    // Clear the timer interrupt
    TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);

    cont1++;
    if( cont1 > 5 ) cont1 = 0;

    conta++;
    if( conta > 6 ) conta = 0;

    if(status_cronometro == 0) cronometro++;
}

void sucess(void)
{
    Nokia5110_Clear();
    while(conta < 5)
    {
        if( cont1%2 == 0)
        {
            //Nokia5110_Clear();
            Nokia5110_ClearBuffer();
            Nokia5110_PrintBMP2(0,0,Sucess01,84,48);
            Nokia5110_DisplayBuffer();
        }

        else
        {
            //Nokia5110_Clear();
            Nokia5110_ClearBuffer();
            Nokia5110_PrintBMP2(0,0,Sucess02,84,48);
            Nokia5110_DisplayBuffer();
        }
    }
}

unsigned char maze_in[504];
unsigned char maze_out[84][48];
unsigned char maze_reout[504];

void maze_to_bin() {

    int i,j,k;
    for(i = 0; i < 84; i++) {

        for(j = 0; j < 6; j++) {

            for(k = 0; k < 8; k++) {

                maze_out[i][j*8 + k] = '0' + ((maze_in[i + 84*j] & (1 << k)) > 0);
            }
        }
    }
}

void maze_to_hex() {

    int i,j,k;
    for(i = 0; i < 84; i++) {

        for(j = 0; j < 6; j++) {

            maze_reout[i + 84*j] = 0;

            for(k = 0; k < 8; k++) {

                maze_reout[i + 84*j] |= ( maze_out[i][j*8 + k] - '0' ) << k;
            }
        }
    }
}

int p_x[4] = {0};
int p_y[4] = {0};
int esp = 1; //espacamento em px entre actor e parede

void init_actor(void)
{
    maze_to_bin();

    p_x[0] = rand()%20;
    p_y[0] = rand()%20;

    p_x[1] = p_x[0]+1;
    p_y[1] = p_y[0];

    p_x[2] = p_x[0];
    p_y[2] = p_y[0]+1;

    p_x[3] = p_x[0]+1;
    p_y[3] = p_y[0]+1;

     while( maze_out[p_x[0]][p_y[0]] != '0' || maze_out[p_x[1]][p_y[1]] != '0' || maze_out[p_x[2]][p_y[2]] != '0' || maze_out[p_x[3]][p_y[3]] != '0' || maze_out[p_x[0]-esp][p_y[0]-esp] != '0' || maze_out[p_x[1]+esp][p_y[1]-esp] != '0' || maze_out[p_x[2]-esp][p_y[2]+esp] != '0' || maze_out[p_x[3]+esp][p_y[3]+esp] != '0' )
    {
        p_x[0] = rand()%80;
        p_y[0] = rand()%80;

        p_x[1] = p_x[0]+1;
        p_y[1] = p_y[0];

        p_x[2] = p_x[0];
        p_y[2] = p_y[0]+1;

        p_x[3] = p_x[0]+1;
        p_y[3] = p_y[0]+1;
    }

    int i;
    for(i=0; i<4; i++)
    {
        maze_out[p_x[i]][p_y[i]] = '1';
    }
    maze_to_hex();
}

void init_maze(void)
{
    int select_maze = rand()%10;
    int i;
    for(i=0; i<504; i++)
    {
        maze_in[i] = maze_library[select_maze][i];
    }
}

int saida_x = 0;
int saida_y = 0;

int function_exit(void)
{
    int option = 0;

    status_cronometro = 1;
    while(1)
    {
        char num[2];
        switch(option)
        {
            case 0:
                Nokia5110_SetCursor(9, 1);
                num[1] = (cronometro%10)+'0';
                num[0] = (cronometro/10)+'0';
                Nokia5110_OutString(num);
                SysCtlDelay( 500000 );
                Nokia5110_ClearBuffer();
                Nokia5110_PrintBMP2(0,0,Exit01,84,48);
                Nokia5110_DisplayBuffer();
                break;

            case 1:
                Nokia5110_SetCursor(9, 1);
                num[1] = (cronometro%10)+'0';
                num[0] = (cronometro/10)+'0';
                Nokia5110_OutString(num);
                SysCtlDelay( 500000 );
                Nokia5110_ClearBuffer();
                Nokia5110_PrintBMP2(0,0,Exit02,84,48);
                Nokia5110_DisplayBuffer();
                break;

            default:
                break;
        }

        if(get_matriz_botao(1000) == LEFT)
        {
            SysCtlDelay( 5000000 );
            option = 0;
        }
        if(get_matriz_botao(1000) == RIGHT)
        {
            SysCtlDelay( 5000000 );
            option = 1;
        }
        if(get_matriz_botao(1000) == SELECT)
        {
            SysCtlDelay( 5000000 );
            status_cronometro = 0;
            return option;
        }
    }
}

void selectPlay(ui32TempValueC)
{
    cronometro = 0;
    init_maze(); //inicializa a escolha de um labirinto de forma aleatoria
    init_actor(); //inicializa o personagem em uma posicao aleatoria no labirinto

    sucess(); //aparece que esta carregando o labirinto

    while(cronometro < 30) //tempo maximo para cada partida
    {
        if( get_matriz_botao(1000) == LOW )
        {
            SysCtlDelay( 50000 );

            maze_to_bin();
            if( (maze_out[p_x[2]][p_y[2]+1+esp] == '0' && maze_out[p_x[3]][p_y[3]+1+esp] == '0') || ( (p_y[2]+1 == 47 ) && (p_y[3]+1 == 47 ) ) )
            {
                maze_out[p_x[0]][p_y[0]] = '0';
                maze_out[p_x[1]][p_y[1]] = '0';
                maze_out[p_x[2]][p_y[2]] = '0';
                maze_out[p_x[3]][p_y[3]] = '0';

                int i;
                for(i=0; i<4; i++)
                {
                    p_y[i] += 1;
                }
            }

            SysCtlDelay( 100000 );
            int i;
            for(i=0; i<4; i++)
            {
                maze_out[p_x[i]][p_y[i]] = '1'; //atualizando actor
            }
            maze_to_hex();
        }

        else if( get_matriz_botao(1000) == HIGH )
        {
            SysCtlDelay( 50000 );

            maze_to_bin();
            if( (maze_out[p_x[0]][p_y[0]-1-esp] == '0' && maze_out[p_x[1]][p_y[1]-1-esp] == '0') || ( (p_y[0]-1 == 0 ) && (p_y[1]-1 == 0) ) )
            {
                maze_out[p_x[0]][p_y[0]] = '0';
                maze_out[p_x[1]][p_y[1]] = '0';
                maze_out[p_x[2]][p_y[2]] = '0';
                maze_out[p_x[3]][p_y[3]] = '0';

                int i;
                for(i=0; i<4; i++)
                {
                    p_y[i] -= 1;
                }
            }

            SysCtlDelay( 100000 );
            int i;
            for(i=0; i<4; i++)
            {
                maze_out[p_x[i]][p_y[i]] = '1'; //atualizando actor
            }
            maze_to_hex();
        }

        else if( get_matriz_botao(1000) == LEFT )
        {
            SysCtlDelay( 50000 );

            maze_to_bin();
            if( maze_out[p_x[0]-1-esp][p_y[0]] == '0' && maze_out[p_x[2]-1-esp][p_y[1]] == '0' )
            {
                maze_out[p_x[0]][p_y[0]] = '0';
                maze_out[p_x[1]][p_y[1]] = '0';
                maze_out[p_x[2]][p_y[2]] = '0';
                maze_out[p_x[3]][p_y[3]] = '0';

                int i;
                for(i=0; i<4; i++)
                {
                    p_x[i] -= 1;
                }
            }

            SysCtlDelay( 100000 );
            int i;
            for(i=0; i<4; i++)
            {
                maze_out[p_x[i]][p_y[i]] = '1'; //atualizando actor
            }
            maze_to_hex();
        }

        else if( get_matriz_botao(1000) == RIGHT )
        {
            SysCtlDelay( 50000 );

            maze_to_bin();
            if( (maze_out[p_x[1]+1+esp][p_y[1]] == '0' && maze_out[p_x[3]+1+esp][p_y[3]] == '0') || ( ( p_x[1]+1 == 83) && (p_x[3]+1 == 83) ) )
            {
                maze_out[p_x[0]][p_y[0]] = '0';
                maze_out[p_x[1]][p_y[1]] = '0';
                maze_out[p_x[2]][p_y[2]] = '0';
                maze_out[p_x[3]][p_y[3]] = '0';

                int i;
                for(i=0; i<4; i++)
                {
                    p_x[i] += 1;
                }
            }

            SysCtlDelay( 100000 );
            int i;
            for(i=0; i<4; i++)
            {
                maze_out[p_x[i]][p_y[i]] = '1'; //atualizando actor
            }
            maze_to_hex();
        }

        Nokia5110_ClearBuffer();
        Nokia5110_PrintBMP2(0,0,maze_reout,84,48);
        Nokia5110_DisplayBuffer();

        SysCtlDelay( 100000 );

        if(get_matriz_botao(1000) == SORT)
        {
            SysCtlDelay( 2500000 );
            init_actor(); //teletransporte
        }

        if( (p_x[1] == 83 && p_x[3] == 83) || (p_y[0] == 0 && p_y[1] == 0) || (p_y[2] == 47 && p_y[3] == 47) )
        {
            selectPlay(ui32TempValueC);
            break;
        }

        if(get_matriz_botao(1000) == BACK)
        {
            int play = function_exit();
            if(play == 0) break;
        }
    }

    //para imprimir game over
    int tempo = 0;
    while(tempo<10)
    {
        tempo++;
        SysCtlDelay( 2500000 );

        if(tempo%2 == 0)
        {
            Nokia5110_ClearBuffer();
            Nokia5110_PrintBMP2(0,0,GameOver01,84,48);
            Nokia5110_DisplayBuffer();
        }

        else
        {
            Nokia5110_ClearBuffer();
            Nokia5110_PrintBMP2(0,0,GameOver02,84,48);
            Nokia5110_DisplayBuffer();
        }
    }

    return;
}

#endif /* SELECAO_PLAY_H_ */
